Кажется, я так и не буду писать на es6 (
Уж очень хочется скрестить qdjsFM и webUsb


Далее 
      DlgManager
       Что нужно от Dlg Manager.
        - Уведомлять панель о событиях
         - Create
         - Minimize
         - Close
        
        - Interface
          - init(panel)
          - create(html, classHandler): intDlgId
          - activate(intDlgId)
          - hide(intDlgId)
          - show(intDlgId)
          - minimize(intDlgId)
          - maximize(intDlgId)
          
      create(html, classHandler)
      html - можно сделать универсальным.
       Если это строка и находится по нему элемент, взять innerHTML
       Если это строка и не находится по нему элемент, использовать как innerHTML
       Если это callable, вызвать и получить HTML
       
      classHandler - это экземпляр класса, который имеет setListeners(id);
															getDlgBtns() // 111 -> Min Max Close
															getDefaultTitle
															getIcon
      id - это id блока окна.
      
      Например, для диалога свойств он по id надёт блок,
        а уже внутри него (по своей внутренней логике) найдёт все интерактивы и повесит на них слушатели
        
      init(panel)
      Нужен, чтобы при необходимости уведомлять panel о событиях, о которых договорились ранее.
      
      activate(intDialogId)
      Нужен, чтобы помещать кликнутый диалог выше других.
       - Берет maxDlgZ и присваивает его себе (с перерисовкой).
       - Проходит по всем диалогам, тому, у которого был max устанавливает свой старый (с перерисовкой).
       
      Panel
       - close
       - hide
       - add
       - setMgr(dlgMgr)
       
      Диалог копирования (и само копирование)
      Выпилить все обращения к FS.
      Выпилить все обращения к Setings.
      Выпилить все обращения к js/dev.
      Выпилить все классы процессов (в web версии этих процессов просто нет).
      Дизейбл всех кликалок, пока не пришел ответ с сервера.
      

проверить в Хроме

------------
Какой должна быть удобная библиотека для работы с файлами из браузера?

Из браузера можно работать с четырьмя видами файлов:
 -  Размещенными на сервере, если сайт предоставляет api для их редактирования.
 -  Выбранными через FileInput
 -  На ограниченной области диска (так называемая в некоторых источниках "песочница")
 - "Виртуальными" (моя терминология для "текстовых файлов" в localStorage и куках)
 
Удобно использовать привычный FS.writefile/readfile.
Если при этом FS = LandFileInputFS
 или FS = LandSandboxFS
 или FS = LandLocalStorageFS
 или FS = LandCookieFS
 
И у всех них есть привычные readfile/writefile
 (+ по возможности open, gets, puts, close).
 
А теперь посмотрим, что у нас есть уже на эту тему.
Есть каталог filesystem с точно не законченной доработкой для GUI
 (кажется, там была попытка реализовать открытие диалога без использования инпута, 
  я не помню сейчас, возможно ли это)
 и неизвестно, законченной ли наработкой для "песочницы" landfilemanager.js.
 
Итого, поскольку мы собрались работать через file input
 кладем рядом LandFileInputFS


